?chisq
??chisq
qchisq(0.95, 8, lower.tail = TRUE)
qchisq(0.975, 8, lower.tail = TRUE)
qchisq(0.025, 8, lower.tail = TRUE)
8*(0.035742806)^2/17.53455
8*(6.493003227)^2/17.53455
8*(6.493003227)^2/2.179731
qchisq(0.995, 8, lower.tail = TRUE)
qchisq(0.005, 8, lower.tail = TRUE)
8*(6.493003227)^2/21.95495
8*(6.493003227)^2/1.344413
cons<-read.csv("eco1.csv")
str(cons)
summary(cons)
cor(cons$X,cons$Y)
plot(cons$X,cons$Y,pch=19)
abline(lm(Y~X,data=cons))
hist(cons$X)
#A PERFECT SCATTERPLOT (WITH MARGINALS)
summary(lm(Y~X,data=cons)
summary(lm(Y~X,data=cons))
summary(lm(Y~X,data=cons))
install.packages(c("beeswarm", "car", "class", "curl", "dplyr", "e1071", "evaluate", "ggmap", "git2r", "kernlab", "knitr", "lme4", "maps", "marked", "psych", "quantreg", "R6", "rafalib", "raster", "RcmdrMisc", "RcppArmadillo", "rgdal", "rgeos", "rmarkdown", "RMySQL", "scales", "sjmisc", "sjPlot", "SparseM", "UsingR"))
install.packages(c("dplyr", "rgeos"))
install.packages("dplyr")
install.packages("rgeos")
install.packages("rgeos")
install.packages("scales")
install.packages(c("car", "dplyr", "mime", "minpack.lm", "RcppArmadillo", "rgeos", "RMySQL", "xml2"))
library("ggplot2", lib.loc="~/R/win-library/3.2")
detach("package:ggplot2", unload=TRUE)
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
library("manipulate", lib.loc="~/R/win-library/3.2")
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library("rCharts", lib.loc="~/R/win-library/3.2")
detach("package:rCharts", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
install.packages("slidify")
library("ggplot2", lib.loc="~/R/win-library/3.2")
install.packages("slidify")
news(Version == "1.0.1", package = "ggplot2")
install.packages("ggplot2")
library(broman)
install.packages("morris")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
install.packages("morris")
install.packages("slidify")
install.packages("ggplot2", type="source")
install.packages("ggplot2", type = "source")
install.packages("ggplot2", type="source")
install.packages("ggplot2", type = "source")
install.packages("slidify")
install.packages("googleVis")
library("devtools", lib.loc="~/R/win-library/3.2")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('plotly')
install_github('plotly')
install_github('ropensci/plotly')
library("Rcpp", lib.loc="~/R/win-library/3.2")
detach("package:Rcpp", unload=TRUE)
install.packages("Rccp")
install.packages(c("devtools", "ggExtra", "raster", "rgdal", "sp", "tidyr"))
install_github('ropensci/plotly')
install_github('ropensci/plotly',type="source")
devtools::install_github('ropensci/plotly',type="source")
devtools::install_github("ropensci/plotly")
install.packages("Rccp")
install.packages("Rccp")
install.packages(c("Rccp")
install.packages(c("Rccp")
install.packages("Rccp")
install.packages("devtools")
install.packages("Rccp")
install.packages("Rcpp")
devtools::install_github("ropensci/plotly")
library("Rcpp", lib.loc="~/R/win-library/3.2")
install.Rtools()
install.Rtools()
install.packages("viridis") # dependency
devtools::install_github("ropensci/plotly")
library("devtools", lib.loc="~/R/win-library/3.2")
devtools::install_github("ropensci/plotly")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
library(downloader)
install.packages("downloader")
library(downloader)
download("https://github.com/ropensci/plotly/archive/master.tar.gz", "plotly.tar.gz")
install.packages("plotly.tar.gz", repos = NULL, type = "source")
install.packages("plotly.tar.gz", repos = NULL, type = "source")
install.packages("J:/rstudio files/plotly.tar.gz", repos = NULL, type = "source")
library(devtools)
install_github("ropensci/plotly")
devtools::install_github("plotly/R-api")
$ch = curl_init("http://google.com");    // initialize curl handle
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
$data = curl_exec($ch);
print($data)
library("plotly", lib.loc="~/R/win-library/3.2")
detach("package:plotly", unload=TRUE)
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
install.packages("fBasics")
install.packages("DescTools")
install.packages("prettyR")
install.packages("descr")
install.packages("ds")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
library("SDSFoundations", lib.loc="~/R/win-library/3.2")
detach("package:SDSFoundations", unload=TRUE)
setwd("H:/Certificate Course in Computer Applicationfor Economic Analysis (CAEA2015-16)_Gokhale Inst PE/rstudio files")
mean<-tapply(rbigdp[,2:10],mean)
rbigdp<-read.csv("rbigdp.csv",header = TRUE)
```
###Exploratory analysis of the dataset
```{r}
str(rbigdp)
mean<-tapply(rbigdp[,2:10],mean)
head(rbigdp)
tail(rbigdp)
summary(rbigdp[,2:10])
summary(rbigdp)
mean<-sapply(rbigdp[,2:10],mean,na.rm=TRUE)
mean
summary(rbigdp,digits = 4)
summary(rbigdp,digits = 6)
summary(rbigdp,digits = 7)
summary(rbigdp,digits = 8)
meanrbi<-sapply(rbigdp[,2:10],mean,na.rm=TRUE)
varrbi<-sapply(rbigdp[,2:10],mean,na.rm=TRUE)
varrbi<-sapply(rbigdp[,2:10],var,na.rm=TRUE)
varrbi
library(Hmisc)
describe(rbigdp)
install.packages("stargazer")
library(stargazer)
stargazer(rbigdp,type = "text")
??stargazer
#?stargazer
?stargazer
cor(rbigdp)
cor(rbigdp[,2:10])
cor(rbigdp[,2:10],na.rm=TRUE)
cor(rbigdp[,2:10])
cor(rbigdp[,2:4])
cor(rbigdp[1:54,2:4])
cor(rbigdp[1:54,2:10])
corrbi<-cor(rbigdp[1:54,2:10])
corrbi<-cor(rbigdp[1:54,2:10])
corrbi
corrplot::corrMatOrder(corrbi)
corrplot(corrbi)
corrgram(corrbi)
pairs(rbigdp[,2:10)
pairs(rbigdp[,2:10])
library(corrplot)
corrplot(rbigdp[,2:10], method="circle")
corrplot(rbigdp, method="circle")
library(ggplot2)
ggcorr(rbigdp)
corrbi<-cor(rbigdp[1:54,2:10])
corrbi<-round(as.matrix(corrbi),2)
corrbi
corrgram(corrbi)
pairs(rbigdp[,2:10])
library(corrplot)
corrplot(rbigdp, method="circle")
corrplot(corrbi, method="circle")
corrplot(as.matrix(rbigdp), method="circle")
corrplot(as.matrix(rbigdp[,2:10]), method="circle")
corrplot(corrbi, method="circle")
corrplot(corrbi, method="number")
rbigdp<-read.csv("rbigdp.csv",header = TRUE)
str(rbigdp)
tail(rbigdp)
rbigdp<-read.csv("rbigdp.csv",header = TRUE)
str(rbigdp)
#seeing the first and last 6 rows
head(rbigdp)
tail(rbigdp)
summary(rbigdp,digits = 8)
rbigdp<-read.csv("rbigdp.csv",header = TRUE)
rbigdp<-read.csv("rbigdp.csv",header = TRUE,sep = ",")
rbigdp<-read.csv("rbigdp.csv",header = TRUE,sep = ",")
str(rbigdp)
#seeing the first and last 6 rows
head(rbigdp)
tail(rbigdp)
summary(rbigdp,digits = 8)
#aliter way to get summary
suppressPackageStartupMessages(library(Hmisc))
describe(rbigdp)
#aliter way to get summary
suppressPackageStartupMessages(library(stargazer))
stargazer(rbigdp,type = "text")
#to know about the function using help or ?
#?stargazer
#get means of all variables in the data set
meanrbi<-sapply(rbigdp[,2:10],mean,na.rm=TRUE) #excluding the first column
meanrbi
#get variances of all variables in the data set
varrbi<-sapply(rbigdp[,2:10],var,na.rm=TRUE)
rbigdp<-read.csv("rbigdp.csv",header = TRUE,sep = ",")
rbigdp<-read.csv("rbigdp.csv",header = TRUE)
```
###1.Exploratory analysis of the dataset using various functions/packages
```{r}
#seeing the structure of the data set
str(rbigdp)
#seeing the first and last 6 rows
head(rbigdp)
tail(rbigdp)
summary(rbigdp,digits = 8)
#aliter way to get summary
suppressPackageStartupMessages(library(Hmisc))
describe(rbigdp)
#aliter way to get summary
suppressPackageStartupMessages(library(stargazer))
stargazer(rbigdp,type = "text")
#to know about the function using help or ?
#?stargazer
#get means of all variables in the data set
meanrbi<-sapply(rbigdp[,2:10],mean,na.rm=TRUE) #excluding the first column
meanrbi
#get variances of all variables in the data set
varrbi<-sapply(rbigdp[,2:10],var,na.rm=TRUE)
varrbi
```
###2.Correlation between various sector-wise gdp series
```{r}
corrbi<-cor(rbigdp[1:54,2:10])
corrbi<-round(as.matrix(corrbi),2)
corrbi
#plotting the correlation matrix
library(corrplot)
corrplot(corrbi, method="number")
corrplot(corrbi, method="circle")
plot(rbigdp$Gross,type="l",lty=2)
plot(rbigdp$Gross,type="l",lty=3)
plot(rbigdp$Gross,type="l",lty=3)
plot(rbigdp$Gross,type="l",lty=1)
plot(rbigdp$Gross,type="l",lty=1,xlab="gross(GDP)",main="plot of GDP /nVs /n Agriculture")
plot(rbigdp$Gross,type="l",lty=1,xlab="gross(GDP)",main="plot of GDP \n Vs \n Agriculture")
plot(rbigdp$Gross,type="l",lty=1,xlab="gross(GDP)",
main="plot of GDP \n Vs \n Agriculture")
plot(rbigdp$Gross,type="l",lty=1,xlab="gross(GDP)",
main="plot of GDP \n Vs \n Agriculture")
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,type="l",lty=1,xlab="gross(GDP)",
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,rbigdp$Agriculture,type="l",lty=1,xlab="gross(GDP)",
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,type="l",lty=1,col="blue",xlab="gross(GDP)",
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,type="l",col="blue",xlab="gross(GDP)",
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,type="p",col="blue",xlab="Gross/GDP",
main="GDP \n vs \n Agriculture")
plot(rbigdp$Gross,type="l",col="blue",xlab="Gross/GDP",
main="GDP \n vs \n Agriculture")
lines(rbigdp$Agriculture,col="red")
plot(rbigdp$Gross,type="l",col="blue",xlab="Gross/GDP",
main="GDP \n vs \n Agriculture")
lines(rbigdp$Agriculture,col="red")
plot(rbigdp$Gross,type="l",col="blue",xlab="Gross/GDP",
main="GDP \n vs \n Agriculture",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red")
plot(rbigdp$Gross,type="l",col="blue",xlab="no of quarterly periods",ylab="Gross/GDP",main="GDP \n vs \n Agriculture",ylim=c(0,10000))
plot(rbigdp$Gross,type="l",col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP \n vs \n Agriculture",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red")
View(rbigdp)
plot(rbigdp$Gross,type="l",lwd=2,col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP \n vs \n Agriculture",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red",lwd=2)
install.packages("pastecs")
library(pastecs)
stat.desc(rbigdp)
round(stat.desc(rbigdp),4)
round(stat.desc(rbigdp[,2:10]),4)
library(psych)
describe(rbigdp[,2:10])
names(rbigdp)
dim(rbigdp) #Gives the dimension of object (rows column)
#function to summarize the variables in the data
summarize.vars<-function(data){
#use dummies package to turn all factors into dummies
require(dummies, quietly=TRUE) #I use the package dummies to create dummy variables of all the factors so that I have only numeric variables in my data (it ignores all character variables if I had any)
dat.d<-dummy.data.frame(data, dummy.class="factor")
#use apply to calculate statistics for each variable
mat<-t(apply(dat.d, 2, function(x) c(length(x),
round(mean(x, na.rm=TRUE),2),
round(sd(x, na.rm=TRUE),2),
round(min(x, na.rm=TRUE),2),
round(max(x, na.rm=TRUE),2),
length(x)-length(x[!is.na(x)]))))
#assign column names and rownames to output table
colnames(mat)<-c("N","Mean","SD","Min","Max","Num Missing")
rownames(mat)<-colnames(dat.d)
return(mat)
}
summarize.vars(rbigdp[,2:10])
#function to summarize the variables in the data
#custom function:
summary2 = function(x) {
# Removes NA in a numeric vecotr and Computes some summary statistics
#
# Args:
# x: a numeric vector
# Returns:
# min, 1st quantile, median, mean, 3rd quantile, max, sd,
# non-NA count of x, skewness, and excess kurtosis
library(e1071)
funs = c(no_na_summary, sd, length2, skewness, kurtosis)
summ.stats = unlist(lapply(funs, function(f) f(x, na.rm=TRUE)))
names(summ.stats) = c("min", "q1", "median", "mean", "q3", "max",
"sd", "n", "skewness", "excess.kurtosis")
summ.stats
}
summary2(rbigdp[,2:10])
no_na_summary = function(x, na.rm=TRUE) {
# Removes NA in a vector and apply summary to it
#
# Args:
# x : a numeric vector
# na.rm: TRUE or FALSE
# Returns:
# the summary statistics of x
summary(x[!is.na(x)])
}
summary2 = function(x) {
# Removes NA in a numeric vecotr and Computes some summary statistics
#
# Args:
# x: a numeric vector
# Returns:
# min, 1st quantile, median, mean, 3rd quantile, max, sd,
# non-NA count of x, skewness, and excess kurtosis
library(e1071)
funs = c(no_na_summary, sd, length2, skewness, kurtosis)
summ.stats = unlist(lapply(funs, function(f) f(x, na.rm=TRUE)))
names(summ.stats) = c("min", "q1", "median", "mean", "q3", "max",
"sd", "n", "skewness", "excess.kurtosis")
summ.stats
}
summary2(rbigdp[,2:10])
length2 <- function (x, na.rm=TRUE) {
# A version of length that can handle NA: if na.rm==T, don't count them
#
# Args:
# x : a vector
# na.rm: TRUE or FALSE
# Returns:
# the length of x
if (na.rm) sum(!is.na(x))
else length(x)
}
no_na_summary = function(x, na.rm=TRUE) {
# Removes NA in a vector and apply summary to it
#
# Args:
# x : a numeric vector
# na.rm: TRUE or FALSE
# Returns:
# the summary statistics of x
summary(x[!is.na(x)])
}
summary2 = function(x) {
# Removes NA in a numeric vecotr and Computes some summary statistics
#
# Args:
# x: a numeric vector
# Returns:
# min, 1st quantile, median, mean, 3rd quantile, max, sd,
# non-NA count of x, skewness, and excess kurtosis
library(e1071)
funs = c(no_na_summary, sd, length2, skewness, kurtosis)
summ.stats = unlist(lapply(funs, function(f) f(x, na.rm=TRUE)))
names(summ.stats) = c("min", "q1", "median", "mean", "q3", "max",
"sd", "n", "skewness", "excess.kurtosis")
summ.stats
}
summary2(rbigdp[,2:10])
summary2(rbigdp[,2])
data("iris")
str(iris)
library(stargazer)
stargazer(iris,type = "text")
library(pastecs)
round(stat.desc(iris),4)
round(stat.desc(iris[,1:4]),4)
library(psych)
describe(iris)
library(fBasics)
basicStats(iris)
basicStats(iris[,1:4])
setwd("J:/rstudio files")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
pairs(iris[,1:4], lower.panel=panel.smooth, upper.panel=panel.cor)
#first create a function (panel.cor)
panel.cor <‐ function(x, y, digits=2, prefix="", cex.cor){
usr <‐ par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y))
txt <‐ format(c(r, 0.123456789), digits=digits)[1]
txt <‐ paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <‐ 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
pairs(iris[,1:4], lower.panel=panel.smooth, upper.panel=panel.cor)
panel.cor <‐ function(x, y, digits=2, prefix="", cex.cor){
usr <‐ par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y))
txt <‐ format(c(r, 0.123456789), digits=digits)[1]
txt <‐ paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <‐ 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
pairs(iris[,rbigdp], lower.panel=panel.smooth, upper.panel=panel.cor)
pairs(rbigdp[,], lower.panel=panel.smooth, upper.panel=panel.cor)
pairs(rbigdp[,2:10], lower.panel=panel.smooth, upper.panel=panel.cor)
plot(rbigdp$Gross,type="l",lwd=3,col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP \n vs \n Agriculture",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red",lwd=3)
```
plot(rbigdp$Gross,type="l",lwd=3,col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP & Agriculture over time",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red",lwd=3)
points(rbigdp$Gross,pch=19)
points(rbigdp$Gross,pch=19,cex=2)
points(rbigdp$Gross,pch=19)
plot(rbigdp$Gross,type="l",lwd=3,col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP & Agriculture over time",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red",lwd=3)
points(rbigdp$Gross,pch=19)
points(rbigdp$Gross,pch=10)
plot(rbigdp$Gross,type="l",lwd=3,col="blue",xlab="no of quarterly periods",ylab="Gross/GDP & Agriculture",main="GDP & Agriculture over time",ylim=c(0,10000))
lines(rbigdp$Agriculture,col="red",lwd=3)
points(rbigdp$Gross,pch=10)
points(rbigdp$Agriculture,pch=10)
text(20,6500,"GDP")
text(20,6500,"GDP",col="blue")
text(20,6500,"GDP",col="blue",cex=2)
text(35,2500,"Agriculture",col="red",cex=2)
text(35,2700,"Agriculture",col="red",cex=2)
text(35,2800,"Agriculture",col="red",cex=2)
library(pastecs)
round(stat.desc(rbigdp[,2:10]),4)
corrbi<-cor(rbigdp[1:54,2:10])
corrbi<-round(as.matrix(corrbi),2)
corrbi
install.packages("J:/Elearning/courseera videos/Data Analysis and Statistical Inference/Openintro stats text bk/openintro_1.4.tar.gz", repos = NULL, type = "source")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="J:/rstudio files/installed_packages.rda")
install.packages(c("data.table", "evaluate", "formatR", "highr", "Hmisc", "installr", "Quandl", "RcppArmadillo", "rgl", "viridis"))
setwd("J:/Elearning/courseera videos/Developing Data Products/Developing Data Products_07092015/rstudio files/project/CLT_Shiny")
publish(title = 'Central Limit Theorem using Shiny', 'index.html', host = 'rpubs')
library("slidify", lib.loc="~/R/win-library/3.2")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
publish(title = 'Central Limit Theorem using Shiny', 'index.html', host = 'rpubs')
rpubsUpload('My First Presentation','index.html')
slidify('index.Rmd',options =list(embed = TRUE))
slidify('index.Rmd')
rpubsUpload('My First Presentation','index.html')
library("knitr", lib.loc="~/R/win-library/3.2")
rpubsUpload('My First Presentation','index.html')
library("shiny", lib.loc="~/R/win-library/3.2")
library("shinyapps", lib.loc="~/R/win-library/3.2")
rpubsUpload('My First Presentation','index.html')
publish(title = 'Central Limit Theorem ', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
slidify('index.Rmd')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
slidify('index.Rmd')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
slidify('index.Rmd')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
slidify('index.Rmd')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
publish(title = 'Central Limit Theorem', 'index.html', host = 'rpubs')
